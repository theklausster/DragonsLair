using Entities;
using ServiceGateway.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace DragonLairFrontEnd.Models
{
    public class TournamentViewModel
    {
        
        private WebApiService ServiceGateway = new WebApiService();
        public List<Tournament> Tournaments { get; set; }
        public Tournament Tournament { get; set; }

        //For Player Selection
        public List<Player> Players { get; set; }
        public List<Player> SelectedPlayers { get; set; }


        //For TournamentType selection
        public TournamentType TournamentType { get; set; }
        public List<TournamentType> TournamentTypes { get; set; }
        public bool TypeIsSelected { get; set; }

        //For Game selection
        public Game Game { get; set; }
        public List<Game> Games { get; set; }
        public bool GameIsSelected { get; set; }


        //For autogenerated
        public List<Team> GeneratedTeams { get; set; }
        public List<Group> GeneratedGroups { get; set; }
        public List<Match> GeneratedMatches { get; set; }

        public async Task PopulateIndexData()
        {
            Tournaments = await ServiceGateway.GetAsync<List<Tournament>>("api/Tournament/");
        }

        public async Task PopulateDetailsData(int id)
        {
            Tournament = await ServiceGateway.GetAsync<Tournament>("api/Tournament/" + id);
        }

        public async Task PopulateCreateData()
        {
            if (Tournament == null) Tournament = new Tournament();
            if (Players == null) Players = await ServiceGateway.GetAsync<List<Player>>("api/Player/");
            if (SelectedPlayers == null) SelectedPlayers = new List<Player>();
            if (TournamentType == null) TournamentType = new TournamentType();
            if (TournamentTypes == null) TournamentTypes = await ServiceGateway.GetAsync<List<TournamentType>>("api/tournamenttype/");
            if (Game == null) Game = new Game();
            if (Games == null) Games = await ServiceGateway.GetAsync<List<Game>>("api/Game/");
        }

        public void AddPlayer(int id)
        {
            Player player = Players.Find(a => a.Id == id);
            if (player != null)
            {
                SelectedPlayers.Add(player);
                Players.Remove(player);
            }
        }

        public void RemovePlayer(int id)
        {
            Player player = SelectedPlayers.Find(a => a.Id == id);
            if (player != null)
            {
                Players.Add(player);
                SelectedPlayers.Remove(player);
            }
        }

        public void AddTourneyType(int id)
        {
            TournamentType type = TournamentTypes.Find(a => a.Id == id);
            if (type != null) TournamentType = type;
            TypeIsSelected = true;

        }

        public void RemoveTourneyType()
        {
            TypeIsSelected = false;
            TournamentType = null;
        }

        public void AddGame(int gameId)
        {
            Game game = Games.Find(a => a.Id == gameId);
            if (game != null) Game = game;
            GameIsSelected = true;
        }

        public void RemoveGame()
        {
            GameIsSelected = false;
            Game = null;
        }


        public async Task CreateTournament(Tournament tournament)
        {
            Tournament.Name = tournament.Name;
            Tournament.StartDate = tournament.StartDate;
            AutoGenerateTeams();
            AutoGenerateGroups();
            AutoGenerateMatches();
            Tournament.Game = Game;
            Tournament.TournamentType = TournamentType;
            Tournament.Groups = GeneratedGroups;
            Tournament.Matches = GeneratedMatches;

            await SaveOnDB();
        }

        private async Task SaveOnDB()
        {

            await ServiceGateway.PostAsync<Tournament>("api/Tournament/", Tournament);
        }

        

        public void AutoGenerateGroups()
        {
            List<Group> groups = new List<Group>();
            
            
            int AmmountOfGroups = GeneratedTeams.Count / 6;
            if (AmmountOfGroups == 0) AmmountOfGroups = 1;
            
            for (int i = 0; i < AmmountOfGroups; i++)
            {
                groups.Add(new Group() { Teams = new List<Team>(), Name = Tournament.Name+"Group"+i});
            }
            if (AmmountOfGroups == 1)
            {
                groups[0].Teams.AddRange(GeneratedTeams);
            }
            else {
                int groupCount = 1;
                for (int i = 0; i < GeneratedTeams.Count; i++)
                {
                    if (groupCount == AmmountOfGroups) groupCount = 1;
                    if (groups[groupCount - 1].Teams.Count > groups[groupCount].Teams.Count)
                    {
                        groups[groupCount].Teams.Add(GeneratedTeams[i]);
                        groupCount++;
                    }
                    else if (groups[0].Teams.Count == groups[AmmountOfGroups - 1].Teams.Count)
                    {
                        groups[0].Teams.Add(GeneratedTeams[i]);
                    }
                }
            }
            GeneratedGroups = groups;
        }

        public void AutoGenerateTeams()
        {
            List<Team> teams = new List<Team>();

           switch(TournamentType.Type)
            {
                case "1vs1":
                    foreach (var item in SelectedPlayers)
                    {
                        teams.Add(new Team() { Name = Tournament.Name+item.Name, Win = 0, Draw = 0, Loss = 0, Players = new List<Player>() { new Player() { Id = item.Id, Name = item.Name } } });
                    }
                    GeneratedTeams = teams;
                break;
            }
        }

       

        public void AutoGenerateMatches()
        {

            var matches = new List<Match>();
            foreach (var item in GeneratedGroups)
            {
           
            if (item.Teams.Count % 2 != 0)
            {
                    item.Teams.Add(new Team() { Name = "UnEven"+item.Name, Win = 0, Draw = 0, Loss = 0, Players = new List<Player>() });
            }

            int numMatch = (item.Teams.Count - 1);
            int halfSize = item.Teams.Count / 2;

            List<Team> teams = new List<Team>();

            teams.AddRange(item.Teams); // Copy all the elements.
            teams.RemoveAt(0); // To exclude the first team.

            int teamsSize = teams.Count;

            for (int match = 0; match < numMatch; match++)
            {
                    string round = (match + 1).ToString();

                int teamIdx = match % teamsSize;
                    matches.Add(new Match() { Round = round, HomeTeam = teams[teamIdx], AwayTeam = item.Teams[0] });
                                      

                for (int idx = 1; idx < halfSize; idx++)
                {
                    int firstTeam = (match + idx) % teamsSize;
                    int secondTeam = (match + teamsSize - idx) % teamsSize;
                        matches.Add(new Match() { Round = round, HomeTeam = teams[firstTeam], AwayTeam = teams[secondTeam] });

                }
            }
        }
            GeneratedMatches = matches;
    }


    }
}